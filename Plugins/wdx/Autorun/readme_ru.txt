Autorun "content plugin" 1.6 beta 13
====================================

Описание и назначение
---------------------
Это простой контентный плагин для выполнения некоторых действий при запуске коммандера. Плагин начинался как сугубо персональный проект, служивший для объединения различных автозапускаемых действий в единый интерфейс. Сейчас в основном разрабатывается для удобства изготовления портабельной сборки. Он покрывает практически весь необходимый функционал автозапуска. Для более сложных или специфических действий будет целесообразнее выполнить скрипт или написать плагин на традиционном языке программирования. 

Плагин представляет собой простой командный процессор, выполняющий команды, заданные в файле конфигурации. Все команды выполняются в отдельном потоке и не должны завешивать коммандер даже в случае проблем с одной из ней. Есть возможность использования переменных и простого If..Else условия.

Autorun должен работать на любой ОС от Win2000 до Win8, но был протестирован только на WinXP SP3 и Win7 x64.

Установка
---------
Перед установкой плагина рекомендуется заранее переименовать файл autorun.example.cfg в autorun.cfg, можно сразу отредактировать его. Установка плагина происходит по обычной схеме. Далее, чтобы реализовать автозапуск при старте Total Commander, нужно создать цветовую схему следующим образом:

• На странице настроек "Цвета" нажать кнопку "Определить цвета для типов файлов". 
• В диалоге "Определить цвета для типов файлов" поставить курсор в любое место списка и нажать кнопку "Добавить". 
• Нажать кнопку "Шаблон". 
• В диалоге "Выбор шаблона" перейти на вкладку "Плагины".
• Выбрать в выпадающем списке плагинов autorun. 
• Выбрать в выпадающем списке свойств Autorun (других там не будет).
• Выбрать в выпадающем списке операций = и ввести в следующем поле любое целое число, например 1. 
• Нажать кнопку "Записать", назвать как-либо шаблон, например Autorun.
• Далее последовательно нажимать кнопку OK во всех диалогах до выхода из всех настроек. 
• Перезапустить TC.

Если у вас много других цветовых схем, рекомендуется устанавливать схему Autorun на самый верх списка, в противном случае возможны несрабатывания.

Плагин может быть переименован, в этом случае нужно переименовать и файл конфигурации.

Файл конфигурации
-----------------
Файл конфигурации - это обычный текстовый файл, в кодировке ANSI или UTF-16 (LE). 

Плагин оперирует двумя секциями в файле конфигурации. Первая секция выполняется при запуске TC, вторая - при завершении. Секция выхода начинается после директивы Pragma AutorunFinalizeSection.

Директивы
---------
Директивы выполняются на этапе предварительной обработки скрипта. Директива начинается с ключевого слова "Pragma".

AutorunFinalizeSection - часть скрипта после этой директивы обрабатывается при завершении Total Commander.
AutorunBlockUnload     - блокирует выгрузку плагина (командой cm_UnloadPlugins) до полного закрытия Total Commander. Полезно для использования ShellExec с ключом /T. Если директива отсутствует, блокировка выключена.

Переменные
----------
Плагин оперирует с двумя типами переменных - внутренними и переменными окружения. Единственное различие между ними только в том, что внутренние переменные видимы только в плагине, а переменные окружения доступны для Total Commander и запускаемых из него программ.
В общем виде переменная представляет собой буквенно-цифровое сочетание, окруженное знаками "%". Внутренние переменные задаются командой Set, а переменные окружения - SetEnv.

Autorun имеет одну специальную переменную %ERROR%. Она обычно равна нулю, но некоторые команды могут устанавливать ее в другое значение в случае нефатальных ошибок (см. документацию к командам). Если вам необходима эта информация, проверяйте переменную сразу после выполнения команды, поскольку следующая команда сбросит переменную в ноль.

Также, плагин имеет несколько предопределенных переменных (констант):

%AUTORUN_TCHANDLE% - хэндл окна Total Commander (для использования в скриптах).
%AUTORUN_TCPID%  - ID процесса Total Commander (для использования в скриптах).
%AUTORUN_ISADMIN% - 1 если TC запущен под админом, иначе 0
%AUTORUN_TCARCH% - 32 или 64 - архитектура TotalCommander, где загружен плагин.

Переопределять предопределенные константы нельзя.

Больше системных констант доступны в плагине Sysinfo.

Условия
-------
Плагин имеет единственное простое условие сравнения:

If <выражение 1> Then
  ...
ElseIf <выражение 2> Then
  ...
Else
  ...
EndIf

Для числового сравнения могут использоваться операторы =, <>, >, <, >=, <=. Для строчного сравнения разрешены только = и <>, сравнение регистронезависимое. Разрешены скобки и операторы AND и OR. Если оба выражения числовые, используется числовое сравнение.

Переменные в выражениях всегда разворачиваются. Если предполагается, что значение, полученное из развернутой переменной может содержать пробелы, оберните выражение в кавычки. Например:

If ("%var_with_spaces%" = "value") Then

Также, некоторые специальные функции могут быть использованы в условии. При этом условие ограничено только одной функцией.

If Function1 <параметры> Then
  ...
ElseIf Function2 <параметры> Then
  ...
Else
  ...
EndIf

Список команд
-------------
AutorunBlockUnload <True/False> - команда временно оставлена для совместимости, используйте вместо нее "Pargma AutorunBlockUnload".

FileExist <имя переменной> <имя файла>
FileExist <имя файла>
Функция доступна для непосредственного вызова и вызова из условия. При непосредственном вызове, первый параметр должен быть именем переменной, в которую будет записан 0 или 1, в зависимости от результата выполнения.

Set [/C] | [/EV] [/EE] <имя переменной> <текст переменной>
Устанавливает внутреннюю переменную. Все внутренние переменные текстовые, но могут рассматриваться как числовые в условиях сравнения.
[/C] - указывает на то, что текст должен трактоваться как выражение, результатом которого должно быть число. Поддерживаются четыре арифметических операции и скобки, переменные (в том числе окружения) всегда разворачиваются.
[/EV] - включает использование переменных окружения в тексте переменной.
[/EE] - включает использование эскейпов в тексте переменной.

При использовании параметра /C, любые нечисловые строки трактуются как ноль, параметры /EV /EE не принимаются во внимание.

SendCommand <команда>
Посылает коммандеру его внутреннюю команду. Может быть задана литерально (значения команд берутся из TOTALCMD.INC) или числом.

ShellExec [/EV] [/SW_HIDE|/SW_SHOWNORMAL|/SW_MINIMIZE|/SW_MAXIMIZE] [/T] [/W[:####]] <имя файла> [<параметры> [<рабочая папка>]]
Запустить внешний файл. Если параметры не заданы, но нужно задать рабочую папку, в качестве параметра поставьте пустую строку (две кавычки подряд). Во всех путях можно использовать любые переменные окружения.
Необязательные параметры:
[/EV] - включает использование переменных окружения в параметрах.
[/SW_HIDE] - скрытое
[/SW_SHOWNORMAL] - обычное (по-умолчанию), также используется при отсутствии явно заданного SW_* параметра
[/SW_MINIMIZE] - свернутое
[/SW_MAXIMIZE] - развернутое на весь экран
[/T] - закрывает запущенный процесс при выгрузке плагина (также см. команду AutorunBlockUnload). 
[/TT] - закрывает дерево запущенного процесса при выгрузке плагина
[/W] - перед закрытием процессов, пытается сначала закрыть окно процесса. Стандартный таймаут ожидания завершения 1000 мс. После параметра опционально может присутствовать число, задающее таймаут, например: /W:5000. Этот параметр может быть использован только совместно с параметрами /T или /TT.
[/WAIT] - ожидать завершения процесса. По-умолчанию ожидает бесконечно.  После параметра опционально может присутствовать число, задающее таймаут, например: /WAIT:5000. При использовании этого параметра, параметры /T или /TT игнорируются.


CommandExec [/CD[:T|S|TS]] <команда/путь1> [<путь2>]
Выполнить пользовательскую команду em_*** или установить в панелях заданные пути.
[/CD] - первый и опциональный второй параметры - пути для установки в панелях. После параметра опционально может присутствовать флаг, как устанавливать каталоги: T - открыть в новой вкладке, S - делает первый путь источником, второй - получателем, иначе левая и правая панели соответственно, ST - комбинация параметров.

SetEnv [/A|/AD] [/EV] [/EE] <имя переменной> <текст переменной>
Установить для текущего процесса переменную окружения. 
Необязательные параметры:
[/A] - добавляет текст к переменной (при отсутствии параметра - заменяет).
[/AD] - то же, что и /A, но разрешает дублирование (см. примечание)
[/EV] - включает использование переменных окружения в тексте переменной.
[/EE] - включает использование эскейпов в тексте переменной.

Примечание: по-умолчанию, при использовании параметра /A, плагин проверяет наличие добавляемого текста в конце текста переменной, и не добавляет его повторно. Это позволяет избежать ситуации с постоянным добавлением строки при перезапуске TC или его выгрузки командой cm_UnloadPlugins. Если все же нужно добавлять текст без этой проверки, используйте параметр /AD.

Пример использования: можно положить noclose.pif в каталог Total Commander и добавить этот путь в PATH процесса, в этом случае команда Shift+Enter будет работать корректно без необходимсти копирования этого файла в каталог windows.

Sleep <задержка>
Задержка выполнения следующей команды в миллисекундах.

IniDelete <имя ini> <секция> [<ключ>]
Удаляет ключ или секцию из заданного файла конфигурации.
Если <ключ> не задан, секция будет стерта целиком. Используйте осторожно!

IniRead <имя переменной> <имя ini> <секция> <ключ> [<текст по-умолчанию>]
Читает значение из заданного файла конфигурации.
Первый параметр должен быть именем переменной. Если переменная не существует, то она будет создана. Текст по-умолчанию это текст, который будет записан в переменную в случае сбоя (ошибка файла, отсутствующий ключ и т.д.)

IniWrite [/EV] <имя ini> <секция> <ключ> [<текст>]
Записывает значение в заданный файл конфигурации. В случае невозможности записи, команда устанавливает переменную ERROR в 1.
Необязательные параметры:
[/EV] - включает использование переменных окружения в тексте.
Эта команда может быть особенно полезна в портабельных сборках для корректировки путей в ini-файлах программ, не умеющих запускаться из любого места.

Language <ID>
Загружает пользовательский язык сообщений из файла autorun.lng. Если эта команда не используется, будет использован язык по-умолчанию (английский). Поскольку все сообщения плагина - это сообщения об ошибках, имеет смысл использовать эту команду только во время отладки.

LoadFont [/N] <font name>
Команда, загружающая выбранный шрифт. По-умолчанию шрифт будет доступен только процессу Total Commander, и будет выгружен при его закрытии.
[/N] - позволяет другим приложениям использовать этот шрифт. Имейте в виду, что шрифт станет недоступен после закрытия TC.

LoadLibrary [/U] <имя dll> [<функция>]
Команда, загружающая заданную динамическую библиотеку (пути могут быть относительны к пути плагина). Также можно выполнить функцию без параметров. 
Необязательные параметры:
[/U] - немедленно выгружает библиотеку после загрузки и выполнения функции (если она задана).

Эта же команда выполняет загрузку плагинов, подробнее в соответствующем разделе.

Примечание: код, выполняющийся при инициализации библиотеки, выполняется в основном потоке, поэтому при использовании блокирующих функций (например, MessageBox), загрузка Total Commander будет приостановлена. Чтобы этого избежать, не используйте таких функций в коде инициализации, или используйте явный вызов функции.

RegRead [/HEX] <имя переменной> <ключ> [<параметр> [<текст по-умолчанию>]]
Читает значение из реестра. Поддерживаются параметры типа REG_DWORD, REG_SZ, REG_EXPAND_SZ, REG_MULTI_SZ, REG_BINARY (возвращается hex-строка). Чтобы получить значение ключа "по-умолчанию", не задавайте имя параметра или используйте пустой параметр, если надо задать текст по-умолчанию.
Необязательные параметры:
[/HEX] - возвращает параметр типа REG_DWORD в виде hex-строки, иначе в десятичном виде.
[/I:xxx] - индекс строки (начинается с 1) для параметра REG_MULTI_SZ. Если не задан, строка возвращается целиком, с разделителем строк. 

StrUpper <имя переменной> <текст>
Переводит текст в верхний регистр и записывает результат в переменную.

StrLower <имя переменной> <текст>
Переводит текст в нижний регистр и записывает результат в переменную.

StrMid <имя переменной> <текст> <положение> [<количество>]
Берет из входного текста заданное количество символов, начиная со стартовой позиции, и записывает результат в переменную. Если количество опущено, копируются символы до конца строки.

StrLeft <имя переменной> <текст> <количество>
Берет из входного текста заданное количество символов с левой стороны строки и записывает результат в переменную.

StrRight <имя переменной> <текст> <количество>
Берет из входного текста заданное количество символов с правой стороны строки и записывает результат в переменную.

StrTrim <имя переменной> <текст>
Удаляет из входного текста пробельные символы с начала и конца строки и записывает результат в переменную.

StrLen  <var name> <text>
Записывает в переменную длину текста.

StrPos [/S] <имя переменной> <текст> <подстрока>
Записывает в переменную позицию подстроки в тексте.
Необязательные параметры:
[/S] - регистрозависимый поиск.

StrReplace [/S] <имя переменной> <текст> <старая подстрока> [<новая подстрока>]
Необязательные параметры:
[/S] - регистрозависимый поиск.

Примечания 
----------
Если в параметре команды должен использоваться пробел, параметр должен быть взят в кавычки - двойные или одинарные. При этом кавычки другого типа могут быть использованы в тексте параметра. Например:

"параметр с пробелами"
'параметр с пробелами'
"параметр с пробелами и 'кавычками'"
'параметр с пробелами и "кавычками"'

Если нужно использовать в тексте кавычки обоих типов, то кавычки того типа, с которых начинается параметр, в тексте должны быть задвоены. 
Пример: 

"этот ""текст"" и этот 'текст' в кавычках" 
'этот "текст" и этот ''текст'' в кавычках'

Строка, начинающаяся с символа #, трактуется как комментарий. Пустые строки игнорируются.

Все необязательные параметры должны начинаться с "/" и находиться перед обязательными параметрами.

Плагины
-------
При необходимости использования своих команд с параметрами, можно воспользоваться возможностью подключения плагинов. Плагины загружаются командой LoadLibrary.

MoveButton
----------
Плагин уже включен в дистрибутив, и предназначен для перемещения кнопки "Опции" в диалогах копирования/перемещения (ввиду того, что ее новое положение в версиях Total Commander c 7.50 многих не устраивает).

MoveOptionsButton <MOVE_LEGACY|MOVE_RIGHT>
Параметр функции может принимать значения:
[MOVE_LEGACY] - перемещает кнопку в позицию, где она была в версиях до 7.5
[MOVE_RIGHT] - перемещает кнопку на правую сторону диалога
Команда может быть выполнена только один раз, последующие запуски игнорируются. Плагин корректно работает только для версий Total Commander 7.55 и выше.


Sysinfo
-------
Плагин экспортирует константы:

%AUTORUN_OSARCH% - архитектура ОС, где работает Total Commander. Может быть 32 или 64.
%AUTORUN_OSVERSION% - версия ОС где работает Total Commander. Может принимать значения:

WIN_2000, WIN_XP, WIN_2003, WIN_2003R2, WIN_VISTA, WIN_2008, WIN_7, WIN_2008R2, WIN_8, WIN_2012

Если версию распознать не удалось, выдается строка, состоящая:

"WIN_" + Major Version + "." + Minor Version

Для рабочей станции к строке в конец добавляется буква "W".

Например, для Windows 7 строка будет: WIN_6.2W, для Windows Server 2008 - WIN_6.1.

%AUTORUN_DESKTOPWIDTH% - ширина экрана.
%AUTORUN_DESKTOPHEIGHT% - высота экрана.
%AUTORUN_DESKTOPDEPTH% - глубина цвета экрана.

И функцию:

GetSystemMetrics <имя переменной> <индекс метрики>
Возвращает значение метрики по заданному индексу. Первый параметр должен быть именем переменной. Если переменная не существует, то она будет создана.

Process
-------
В плагин будут включены дополнительные функции для работы с процессами.

ProcessExist [/F] [/EV] <имя переменной> <имя процесса>
ProcessExist [/F] [/EV] <имя процесса>
Функция доступна для непосредственного вызова и вызова из условия. При непосредственном вызове, первый параметр должен быть именем переменной, в которую будет записан 0 или 1, в зависимости от результата выполнения.
[/F] - использовать сравнение по полному пути к файлу.
[/EV] - включает использование переменных окружения в тексте.

ProcessCount [/F] [/EV] <имя переменной> <имя процесса>
Выдает число запущенных процессов с данным именем.
Первый параметр после необязательных должен быть именем переменной. Если переменная не существует, то она будет создана.
[/F] - использовать сравнение по полному пути к файлу.
[/EV] - включает использование переменных окружения в тексте.

ProcessTerminate [/F] [/EV] [/TT] [/A] [/W[:####]] <имя процесса 1> [<имя процесса 2> [... <имя процесса N>]]
Закрывает один или несколько процессов. Обратите внимание, что необязательные параметры применяются ко всем перечисленным в команде процессам.
[/F] - использовать сравнение по полному пути к файлу.
[/EV] - включает использование переменных окружения в параметрах.
[/TT] - закрывает дерево процесса.
[/W] - перед закрытием процессов, пытается сначала закрыть окно процесса. Стандартный таймаут ожидания завершения 1000 мс. После параметра опционально может присутствовать число, задающее таймаут, например: /W:5000.
[/A] - закрывает все процессы c одинаковым именем (иначе только первый).

ProcessExecGetOutput [/EV] [/OEM] <имя переменной> <имя файла> [<параметры> [<рабочая папка>]]
Запускает процесс (скрыто) и получает результат его выполнения через stdout в переменную. 
[/EV] - включает использование переменных окружения в параметрах.
[/OEM] - вывод программы в OEM-кодировке (по-умолчанию ANSI)

Особенности работы с x64-версией
--------------------------------
Работа с данной версией ничем не отличается от работы с 32-битной, за исключением загрузки библиотек и плагинов. Под 64-битной версией вы можете загружать только 64-битные библиотеки и плагины, под 32-битной - соответственно, только 32-битные.

Для простоты использования плагинов и возможности использования единого файла конфигурации в разных версиях TC, для 64-битных версий плагинов используется неявная загрузка. Для этого 64-битная версия плагина должна иметь расширение "dll64". При этом в файле конфигурации прописывается имя библиотеки с раширением "dll". 

На примере плагина MoveButton: запись в файле конфигурации "LoadLibrary Plugins\Autorun_MoveButton.dll". Под 32-битной версией TC будет загружена библиотека Autorun_MoveButton.dll, под 64-битной - Autorun_MoveButton.dll64.

История
-------
1.6 beta 13
+ добавлен функционал переменной %ERROR%
+ добавлены команды SystemParametersInfo, GetSysColor в плагин SysInfo
+ базовые функции для работы со строками
- убрана поддержка Win9x/ME/NT4 из плагина Sysinfo (Autorun не работает на них)
* IniWrite не выдает диалог сообщения об ошибке в случае невозможности записи (теперь устанавливает %ERROR%)
* изменения в API
* уменьшен размер стандартных плагинов
* по-умолчанию переменные разворачиваются, используйте переключатель /EV- для отключения

1.6 beta 12
+ добавлен API для С++
* системная информация перенесена в плагин Sysinfo
+ добавлен плагин Sysinfo
- исправлена работа с пустыми строками в сравнении
- исправлена загрузка скрипта в некоторых ситуациях

1.6 beta 11
+ команда ProcessExecGetOutput в плагине Process
+ команда RegRead
- исправлена ошибка с выражениями, содержащими and/or

1.6 beta 10
+ Дополнительные примеры использования кавычек в справке
+ Параметр /WAIT в функции ShellExec
* AutorunBlockUnload теперь используется в Pragma (функция оставлена для совместимости)
* FinalizeSection переименовано в AutorunFinalizeSection и используется в Pragma
+ Ключевое слово Pragma для работы с директивами
* FileExist работает с каталогами с завершающим "\"

1.6 beta 9
+ функция FileExist
* оптимизирован код, слегка уменьшен размер плагина
* внутренние переменные могут принимать пустое значение

1.6 beta 8
- исправлены неправильные номера строк в сообщениях
- исправлено падение при использовании == в сравнении

1.6 beta 7
+ возможность выполнения действий при закрытии TC
+ добавлена функция ProcessTerminate в плагин Process
+ файл конфигурации может быть ANSI или UTF-16(LE).
- исправлена проблема с ShellExec в определенных условиях

1.6 beta 6
+ возможность использования полноценных условий сравнения
+ возможность использования специальных функций в сравнении
+ плагин Process (работа с процессами)
* изменения в языковом файле

1.6 beta 5
* полностью изменен API плагинов
+ добавлена константа %AUTORUN_TCPID%
+ добавлено определение Windows 8
* обновлен языковый файл

1.6 beta 4
- исправлено сравнение строк
- исправлено определение версии ОС

1.6 beta 3
+ добавлен пример использования условного блока в autorun.example.cfg
- исправлены ошибки в файле перевода
- исправлена нерабочая команда CommandExec
- исправлено падение при выходе с ключами T/TT в ShellExec

1.6 beta 2
* переписан плагин MoveButton для уменьшения нагрузки на CPU
+ добавлена константа AUTORUN_TCARCH (32 или 64)
- исправлено отображение поля "Autorun"
1.6 beta 1 
+ переход на новый компилятор для поддержки версий x64
- исправлена проблема с поиском путей dll

1.5.0 - Добавлена константа %AUTORUN_ISADMIN%
1.4.9.6 beta - переписана команда CommandExec
1.4.9.5 beta - исправлен код закрытия процессов
1.4.9.4 beta - добавлен параметр /W для ShellExec
1.4.9.3 beta - добавлен параметр /TT для ShellExec
1.4.9.2 beta - добавлен параметр /T для ShellExec, добавлена команда AutorunBlockUnload, исправлена версия файла
1.4.9.1 beta - добавлены переменные (Set), условие, команда LoadFont, перевод сообщений
1.4.7 - добавлена функция IniDelete
1.4.6 - исправлено зависание на пустых строках
1.4.5 - небольшое исправление в функции, разворачивающей переменные окружения, убрано ограничение на использование смешанных кавычек
1.4.4 - исправлена установка через TC Plugin Manager, добавлена информация о версии.
1.4.3 - исправлен баг, когда переменная окружения становилась пустой в режиме добавления, если ее исходная длина была достаточно велика
1.4.2 - добавлен параметр /AD для команды SetEnv (см. примечание)
1.4.1 - исправлено падение TC при вызове cm_UnloadPlugins
1.4 - изменена обработка необязательных параметров/переключателей, добавлена возможность загрузки библиотек, добавлена возможность создавать плагины
1.3 - добавлены параметры отображения окна для команд запуска, значение поля Autorun можно сравнивать с чем угодно
1.2 - первая публичная версия, вместо ini - скриптоподобный файл конфигурации
1.1 - добавлена поддержка переменных окружения и прочие улучшения
1.0 - первая версия, три команды, конфигурация хранится в .ini

Планы
-----
Ярко выраженных планов нет. Разумеется, принимаются сообщения о багах. Предложения по функционалу рассматриваются, но в "ядро" могут быть добавлены только достаточно универсальные. Никаких визуальных конфигураторов делать не планируется.


Для разработчиков
-----------------
При загрузке библиотеки команда LoadLibrary пытается найти в dll функцию Autorun_PluginInit, и если такая будет найдена, предоставляет возможность разработчику задать команды и переменные. В функцию передается структура PAutorunInterface, содержащую различные полезные данные, которые можно в дальнейшем использовать в плагине, а также указатель на единую функцию-адаптер. Для работы с функциями необходимо присвоить этот указатель глобальной переменной Adapter.

В настоящее время реализованы следующие функции:

procedure AddFunc(AName: PWideChar; AAddr: Pointer; AFlags: integer);

Добавляет пользовательскую функцию для использования в скрипте Autorun.

function ParseNext(AParamStr: PWideChar; ABuffer: PWideChar): integer;

Записывает в буфер ABuffer первый параметр из строки. При этом параметр удаляется из исходной строки. Функция возвращает тип параметра (AU_PARSER_NAMEDPARARAM, AU_PARSER_REGULARPARAM). Если параметров больше нет, возвращается AU_PARSER_NOMOREPARAMS.

function GetVar(AVarName: PWideChar; Buffer: PWideChar): integer;

Записывает в буфер ABuffer значение переменной, с именем AVarName. Если переменная не существует, функция возвращает код ошибки AU_RESULT_VARNOEXIST.

function SetVar(const AName, AValue: PWideChar; AFlags: integer): integer;

Устанавливает переменную с именем AName и значением AValue. Если AFlags равен AU_VAR_CONSTANT, то переменная будет защищена от изменений. Если функция пытается изменить константу, то ее значение не будет изменено, при этом функция вернет код ошибки AU_RESULT_NOREDEFINECONST.

function ExpandVars(const AText: PWideChar; ABuffer: PWideChar): integer;

Разворачивает переменные в тексте AText с учетом внутренних переменных и переменных окружения и возвращает результат в буфер ABuffer.

Подробнее смотрите в прилагаемом файле testplugin_src.zip

Copyright (c) 2010-2012 Dmitry Yudin